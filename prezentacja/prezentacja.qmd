---
title: "Probabilisyczne łączenie rekordów"
author: "Maciej Beręsewicz (Urząd Statystyczny w Poznaniu)"
format: 
  revealjs:
      number-sections: true
      number-depth: 1
      width: 1600
      heigth: 900
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(countdown)
library(stringdist)
library(igraph)
library(RANN)
```

# Początek

## Oczekiwania dot. szkolenia

```{r}
countdown(minutes = 7, bottom = 0)
```

Proszę wejść na stronę www.menti.com i podać kod

**7379 4838**

## Oczekiwania dot. szkolenia

Wyniki

## Doświadczenie w zakresie integracji danych

```{r}
countdown(minutes = 7, bottom = 0)
```

Proszę wejść na stronę www.menti.com i podać kod

**3507 6668**

## Doświadczenie w zakresie integracji danych

Wyniki

## Wprowadzenie

1.  Wprowadzenie do łączenia danych
2.  Procedura probabilistycznego łączenia rekordów
3.  Porównywanie tekstów
4.  Blokowanie rekordów do porównań
5.  Łączenie rekordów: nienadzorowane
6.  Łączenie rekordów: nadzorowane

## Motywacja

| Rejestr | Liczba cudzoziemców |
|---------|--------------------:|
| PESEL   |           2 004 765 |
| ZUS     |             957 539 |
| MF      |           1 513 129 |
| KRUS    |              67 932 |
| NFZ     |           2 034 434 |
| UdSC    |             545 873 |

## Motywacja

| Rejestr   |     Etap1 |     Etap2 | Bez identyfikatorów |
|-----------|----------:|----------:|--------------------:|
| KRUS      |     4 674 |    18 317 |              42 693 |
| MF        | 1 043 769 | 1 132 840 |             352 088 |
| NFZ       | 1 987 884 | 1 987 891 |              42 524 |
| ZUS       |   624 113 |   760 765 |             117 926 |
| Wszystkie | 1 988 650 | 1 989 390 |                 \-- |

## Motywacja

| Imie        | Imie2 | Nazwisko       | Rok urodzenia |
|-------------|-------|----------------|---------------|
| Miguel      | Luis  | Pereira Tinoco | 1969          |
| Miguel Luis |       | Pereira-Tinoco | 1969          |
| Miguel      |       | Pereira-Tinoco | 1968          |
| Thi         | Hy    | Dao            | 1993          |
| Dao Thi Hy  |       |                | 1993          |
| Thi         |       | Dao            | 1992          |

# Wprowdzenie do łączenia danych

## Łączenie deterministyczne

![Przykładowe łączenie danych po kluczach (źródło:
<https://phpmajster.blogspot.com/2015/06/sql-aliasy-i-zaczenia-wielu-tabel-za.html>)](https://1.bp.blogspot.com/-IlS27_IERRk/VXXmC_DZHKI/AAAAAAAAIyM/WqqfjygxDYg/s1600/relacje.png){fig-align="center"}

## Łączenie probabilistyczne

![Przykładowe łączenie danych bez kluczy (źródło: Roszka
(2012))](images/roszka.png){fig-align="center"}

## Łączenie probabilistyczne (procedura)

![Algorytm integracji danych. Źródło: Data Integration Manual
(2006)](images/procedura.png){fig-align="center"}

## Łączenie probabilistyczne (literatura)

![Binette, O., & Steorts, R. C. (2022). (Almost) all of entity
resolution. Science Advances,
8(12)](images/literatura1.png){fig-align="center"}

## Łączenie probabilistyczne (literatura)

![Źródło:
https://www.wbc.poznan.pl/publication/326096](images/roszka-dr.png){fig-align="center"}

# Porównywanie napisów

## Problem

Jak wyznaczyć odległość między następującymi rekordami?

| Imie        | Imie2 | Nazwisko    | Data urodzenia | Gmina     |
|-------------|-------|-------------|----------------|-----------|
| Maciej      | E     | Beręsewicz  | 1987           | Poznań    |
| Maciej Eryk |       | Berecewicz  | 1987           | Poznań    |
| Maciej      | Eryk  | Berensewicz | 1987           | Białystok |

: Przykładowe dane

## Miary odległości między napisami

![Lista miar odległości między napisami (źródło:
https://www.baeldung.com/cs/string-similarity-edit-distance)](https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/sim-families1.png){fig-align="center"}

## Pakiety w R do wyznaczania odległości

-   pakiet `stringdist` (artykuł: Van der Loo, M. P. (2014). The
    stringdist package for approximate string matching. *R Journal*,
    *6*(1), 111.)
-   pakiet `stringi` (artykuł: Gagolewski, M. (2022). stringi: Fast and
    portable character string processing in R. *Journal of Statistical
    Software*, *103*, 1-59.)
-   pakiet `reclin2` (artykuł: van der Laan, D. J. (2022). reclin2: a
    Toolkit for Record Linkage and Deduplication. *R Journal*, *14*(2).)

## Miary odległości

-   Zastąpienie znaku, jak w "foo" -\> "boo".
-   Usunięcie znaku, jak w 'foo' -\> 'oo'.
-   Wstawienie znaku, jak w 'foo' -\> 'floo'.
-   Transpozycja dwóch sąsiadujących znaków, jak w 'foo' -\> 'ofo'.

## Odległość Hamminga

-   **Odległośc Hamminga** to miara odmienności dwóch ciągów o takiej
    samej długości, wyrażająca liczbę miejsc (pozycji), na których te
    dwa ciągi się różnią. Innymi słowy jest to najmniejsza liczba zmian
    (operacji zastępowania elementu innym), jakie pozwalają
    przeprowadzić jeden ciąg na drugi.

-   [Uwaga]{.underline}: tylko ciągi o tej samej długości

    |     |     |     |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E   | W   | I   | C   | Z   |
    | B   | E   | R   | **E** | **C** | E   | W   | I   | C   | Z   |

## Odległość Hamminga (ćwiczenia)

```{r}
countdown(minutes = 5, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość Hamminga dla następujących napisów:
    -   warmińsko-mazurskie / warminsko mazurskie
    -   miasto Poznań / miasto Poznan

## Odległość Hamminga (przykład w R)

-   Przykład dla równych napisów

```{r hamming, echo = TRUE}
stringdist(a = "beręsewicz",
           b = "berecewicz",
           method = "hamming")
```

-   Przykład dla równych napisów

```{r hamming2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminsko mazurskie",
           method = "hamming")
```

## Odległość Hamminga (przykład w R)

-   Przykład dla napisów o nierównej długości

```{r hamming3, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminskomazurskie",
           method = "hamming")
```

## Odległość Hamminga (przykład w R)

-   Przykład dla równych napisów

```{r hamming4, echo = TRUE}
stringsim(a = "beręsewicz",
          b = "berecewicz",
          method = "hamming")
```

Wyznaczone jako

$$
1 - \frac{\text{dist}}{\text{max (długość tekstów)}}
$$

## Odległość Hamminga (przykład w R)

-   Odległość między wektorem, a referencją

```{r hamming5, echo = TRUE}
stringsim(a = c("Beręsewicz", "Berencewicz", "Beręcewicz"),
          b = "beręsewicz",
          method = "hamming")
```

-   Odległość między wektorem, a wektorem (macierz)

```{r hamming6, echo = TRUE}
stringsimmatrix(a = c("Beręsewicz", "Berencewicz", "Beręcewicz"),
                b = c("Beręsewicz", "Berencewicz", "Beręcewicz"),
                method = "hamming")
```

## Najdłuższy wspólny podciąg

-   ang. *Longest Common Substring* (LCS)

-   Odległość LCS jest wtedy liczbą niesparowanych znaków w obu
    łańcuchach

    |     |     |     |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E   | W   | I   | C   | Z   |
    | B   | E   | R   | **E** | **C** | E   | W   | I   | C   | Z   |

-   Odległość wynosi 4

## Odległość LCS (ćwiczenia)

```{r}
countdown(minutes = 5, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość LCS dla następujących napisów:
    -   warmińsko-mazurskie / warminskomazurskie
    -   miasto Poznań / m.Poznan

## LCS (przykład w R)

-   Metoda `lcs`

```{r lcs1, echo = TRUE}
stringdist(a = "beręsewicz",
           b = "berecewicz",
           method = "lcs")
```

## LCS (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r lcs2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminskomazurskie",
           method = "lcs")
```

-   ćwiczenie 2

```{r lcs3, echo = TRUE}
stringdist(a = "miasto Poznań",
           b = "m.Poznan",
           method = "lcs")
```

## Odległość Levenshteina

-   Odległość Levenshteina (edycyjna) - miara odmienności napisów
    (skończonych ciągów znaków), zaproponowana w 1965 roku przez
    Władimira Lewensztejna.
-   Formalnie jest to metryka w przestrzeni ciągów znaków, zdefiniowana
    następująco:
    -   działaniem prostym na napisie nazwiemy:
        -   wstawienie nowego znaku do napisu,
        -   usunięcie znaku z napisu,
        -   zamianę znaku w napisie na inny znak.
    -   odległością pomiędzy dwoma napisami jest najmniejsza liczba
        działań prostych, przeprowadzających jeden napis na drugi.

## Odległość Levenshteina (przykład)

-   Przykład 1

    |     |     |     |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E   | W   | I   | C   | Z   |
    | B   | E   | R   | **E** | **C** | E   | W   | I   | C   | Z   |

-   Zamiany:

    -   e -\> ę
    -   s -\> c

-   Odległosć: 2

## Odległość Levenshteina (przykład)

-   Przykład 2

    |     |     |     |       |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E     | W   | I   | C   | Z   |     |
    | B   | E   | R   | **E** | **N** | **S** | E   | W   | I   | C   | Z   |

-   Zamiany:

    -   e -\> ę
    -   usunięcie n

-   odległość: 2

## Odległosć Levenshteina (ćwiczenia)

```{r}
countdown(minutes = 5, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość Levenshteina dla następujących
    napisów:
    -   warmińsko-mazurskie / warminskomazurskie
    -   miasto Poznań / m.Poznan

## Przykład w R

```{r lv, echo = TRUE}
stringdist(a = "beręsewicz",
           b = "berensewicz",
           method = "lv")
```

## Levenshteina (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r lv2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminskomazurskie",
           method = "lv")
```

-   ćwiczenie 2

```{r lv3, echo = TRUE}
stringdist(a = "miasto Poznań",
           b = "m.Poznan",
           method = "lv")
```

## Optymalne wyrównanie ciągów

-   ang. *optimal string alignment* (OSA; inaczej też ang. *restricted
    Damerau-Levenshtein* distance ale nie *Damerau-Levenshtein
    distance*)
-   rozszerza odległość Levenshteina o możliwość zamiany miejscami
    sąsiadujących znaków

## OSA (przykład)

-   Przykład 1

    |     |     |     |       |       |       |     |     |     |     |
    |-----|-----|-----|-------|-------|-------|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | **E** | W   | I   | C   | Z   |
    | B   | E   | R   | **E** | **E** | **S** | W   | I   | C   | Z   |

## OSA (ćwiczenia)

```{r}
countdown(minutes = 5, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość OSA dla następujących
    napisów:
    -   warmińsko-mazurskie / warminsok-mazurskie
    -   miasto Poznań / m.Opznań

## OSA (przykład w R)

```{r osa1, echo = TRUE}
stringdist(a = "beręsewicz",
           b = "beręeswicz",
           method = "osa")
```

## OSA (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r osa2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminsok-mazurskie",
           method = "osa")
```

-   ćwiczenie 2

```{r osa3, echo = TRUE}
stringdist(a = "miasto Poznań",
           b = "m.Opznań",
           method = "osa")
```

## Odległość Jaccarda

-   Indeks Jaccarda, współczynnik podobieństwa Jaccarda -- statystyka
    używana do porównywania zbiorów.
-   Wzór na indeks Jaccarda

$$
J(A, B)=\frac{|A \cap B|}{|A \cup B|}
$$

-   W przypadku porównywania tekstów mówimy relacji części wspólnej do
    długości

## Odległość Jaccarda (przykład)

-   Przykład 1

    |     |     |     |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E   | W   | I   | C   | Z   |
    | B   | E   | R   | **E** | **C** | E   | W   | I   | C   | Z   |

-   część wspólna: 7

-   suma unikalnych znaków: 9

-   odległosć: 1 - 7/9 = 2/9 ($\approx$ 0.22)

## Odległość Jaccarda (przykład)

-   Przykład 2

    |     |     |     |       |       |       |     |     |     |     |     |
    |-----|-----|-----|-------|-------|-------|-----|-----|-----|-----|-----|
    | B   | E   | R   | **Ę** | **S** | E     | W   | I   | C   | Z   |     |
    | B   | E   | R   | **E** | **N** | **S** | E   | W   | I   | C   | Z   |

-   część wspólna: 7

-   suma unikalnych znaków: 10

-   odległosć: 1 - 7/10 = 1/3

## Odległość Jaccarda (ćwiczenia)

```{r}
countdown(minutes = 10, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość Jaccarda dla następujących
    napisów:
    -   warmińsko-mazurskie / warminsok-mazurskie
    -   miasto poznań / m.ppznań

## Odległość Jaccarda (przykład w R)

-   Przykład 1

```{r jacc1a, echo=TRUE}
qgrams(a = "beręsewicz",
       b = "berecewicz",
       q = 1)
```

```{r jacc1b, echo=TRUE}
stringdist(a = "beręsewicz",
           b = "berecewicz",
           method = "jaccard", 
           q = 1)
```

## Odległość Jaccarda (przykład w R)

-   Przykład 2

```{r jacc2a, echo=TRUE}
qgrams(a = "beręsewicz",
       b = "berencewicz",
       q = 1)
```

```{r jacc2b, echo=TRUE}
stringdist(a = "beręsewicz",
           b = "berencewicz",
           method = "jaccard", 
           q = 1)
```

## Odległość Jaccarda (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r jacc3a, echo = TRUE}
qgrams(a = "warmińsko-mazurskie",
       b = "warminsok-mazurskie",
       q = 1)
```

```{r jacc3b, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminsok-mazurskie",
           method = "jaccard")
```

## Odległość Jaccarda (rozwiązania ćwiczeń)

-   ćwiczenie 2

```{r jacc4a, echo = TRUE}
qgrams(a = "miasto poznań",
       b = "m.opznań",
       q = 1)
```

```{r jacc4b, echo = TRUE}
stringdist(a = "miasto poznań",
           b = "m.opznań",
           method = "jaccard")
```

## $q$-gramy

-   często wykorzystuje się do porównań $q$-gramy (np. 2-gramy, czasem
    też nazywane shingles jeżeli odnosimy się do liter),
-   mozna użyć albo odległości Jaccarda albo $q$-gram,
-   $q$-gram zdefiniowana jest następująco uzyskuje się poprzez
    zestawienie q-gramów występujących w dwóch ciągach i zliczenie
    liczby q-gramów, które nie są współdzielone między nimi.

## $q$-gramy (Przykład)

+ 1-gramy: `{B,e,r,ę,s,e,w,i,cz}`
+ 2-gramy: `{Be, er, rę, ęs, se, ew, wi, ic, cz}`
+ 3-gramy: `{Ber, erę, ręs, ęse, sew, wic, ewi, icz}`

## $q$-gramy (Przykład w R)

```{r qgrams1a, echo = TRUE}
qgrams("Beręsewicz", q=1)
qgrams("Beręsewicz", q=2)
qgrams("eręsewicz", q=3)
```

```{r qgrams1b, echo = TRUE}
qgrams(a = "beręsewicz",
       b = "berencewicz",
       q = 2)
```

## $q$-gramy (Przykład w R)

+ odległość Jaccarda na 1-gramach
```{r jac-qgram1}
stringdist(a = "beręsewicz",
           b = "berencewicz",
           method = "jaccard", 
           q = 1)
```

+ odległość $q$-gram na 1-gramach

```{r jac-qgram2}
stringdist(a = "beręsewicz",
           b = "berencewicz",
           method = "qgram", 
           q = 1)
```

## Odległość $q$-gram (ćwiczenia)

```{r}
countdown(minutes = 10, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość $q$-gram dla następujących
    napisów:
    -   warmińsko-mazurskie / warminsok-mazurskie
    -   miasto poznań / m.ppznań
    
    Wykorzystując $q$ równe 2 i 3.
    
## Odległość $q$-gram (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r q1, echo = TRUE}
qgrams(a = "warmińsko-mazurskie",
       b = "warminsok-mazurskie",
       q = 2)
```

```{r q2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminsok-mazurskie",
           method = "qgram",
           q=2)
```

## Odległość $q$-gram (rozwiązania ćwiczeń)

-   ćwiczenie 2

```{r q3, echo = TRUE}
qgrams(a = "miasto poznań",
       b = "m.ppznań",
       q = 2)
```

```{r q4, echo = TRUE}
stringdist(a = "miasto poznań",
           b = "m.ppznań",
           method = "qgram",
           q=2)
```


## Odległość cosinusowa

+ miara odległosci (tak naprawdę kąt) między dwoma wektorami utworzonymi przez $q$-gramy
+ wzór:

$$
1-\frac{v_1 v_2}{||v_1||_2||v_2||_2},
$$

gdzie $||.||_2$ oznacza normę Euklidesową $\sqrt{\sum_i v_{1,i}^2}$.

## Odległość cosinusowa (przykład)

+ rozważmy tylko imię: maciej i maicej i 2-gramy
+ pierwsze: `{ma, ac, ci,ie,ej}`
+ drugie: `{ma, ai, ic, ce, ej}`
+ w zapisie wektorowym:

```{r}
res <- qgrams(a= "maciej", b="maicej", q=2)
v1 <- res[1, ]
v2 <- res[2, ]
licznik <- sum(v1*v2)
mianownik <- sqrt(sum(v1^2))*sqrt(sum(v2^2))
res
```

+ odległość:

$$
1- \frac{v_1 v_2}{||v_1||_2||v_2||_2} = 1 - \frac{`r licznik`}{`r mianownik`} = `r 1-licznik/mianownik`.
$$

## Odległość cosinusowa (przykład w R)

```{r cos1, echo = TRUE}
stringdist("maciej",
           "maicej",
           method = "cosine",
           q=2)
```

## Odległość cosinowa (ćwiczenia)

```{r}
countdown(minutes = 10, bottom = 0)
```

-   Ćwiczenie: ile wynosi odległość $q$-gram dla następujących
    napisów:
    -   warmińsko-mazurskie / warminsok-mazurskie
    -   miasto poznań / m.ppznań
    
    Wykorzystując $q$ równe 2 i 3.
    

## Odległość cosinowa (rozwiązania ćwiczeń)

-   ćwiczenie 1

```{r c1, echo = TRUE}
qgrams(a = "warmińsko-mazurskie",
       b = "warminsok-mazurskie",
       q = 2)
```

```{r c2, echo = TRUE}
stringdist(a = "warmińsko-mazurskie",
           b = "warminsok-mazurskie",
           method = "cosine",
           q=2)
```

## Odległość cosinowa (rozwiązania ćwiczeń)

-   ćwiczenie 2

```{r c3, echo = TRUE}
qgrams(a = "miasto poznań",
       b = "m.ppznań",
       q = 2)
```

```{r c4, echo = TRUE}
stringdist(a = "miasto poznań",
           b = "m.ppznań",
           method = "cosine",
           q=2)
```


## Odległość Jaro

+ Podobieństwo Jaro między ciągami znaków a i b wyraża się następującym wzorem:
+ Wzór

$$
\left\{\begin{array}{ll}0 & \text { dla } m=0 \\ 1- \frac{1}{3}\left(\frac{m}{|a|}+\frac{m}{|b|}+\frac{m-t}{m}\right) & \text { dla } m \neq 0\end{array}\right.
$$
gdzie

+ $m$ to liczba pasujących znaków. Dwa znaki, odpowiednio z a i \(b\), sa uważane
za pasujące tylko wtedy, gdy są takie same i są nie dalej niż 

$$
\left\lfloor\frac{\max (|a|,|b|)}{2}\right\rfloor-1
$$

znaków od siebie,
+ $t$ to liczba dopasowań po transpozycji drugiego ciągu znaków, podzielona
przez 2.

## Odległość Jaro (przykład w R)

```{r ja, echo = TRUE}
stringdist("maciej",
           "maicej",
           method = "jw")
```

## Odległość Jaro-Winklera

+ Algorytm Winklera jest ulepszeniem algorytmu Jaro, powstałym poprzez zastosowanie pomysłów opartych na obserwacjach empirycznych, które wykazały, że mniej błędów występuje zwykle na początku błędnie zapisanych nazwisk osób
+ Algorytm Winklera zwiększa zatem miarę podobieństwa Jaro dla identycznych znaków początkowych:

$$
d_{\mathrm{jw}}(a, b)=d_{\mathrm{jaro}}(a, b)[1-p \ell(a, b)],
$$

gdzie $\ell(.)$ jest długością wspólnego prefiksu na początku obu ciągów, maksymalnie
wynoszącą 4, a p jest współczynnikiem skalowania (nie więcej niż 0.25)

## Odległość Jaro-Winklera (przykład w R)

```{r jw, echo = TRUE}
stringdist("maciej",
           "maicej",
           method = "jw",
           p = 0.1)
```

## Podsumowanie

+ Ostatecznie wybór zależy od zastosowania, ale istnieją pewne ogólne rozważania. 
+ Wybór między metryką opartą na edycji lub metryką heurystyczną z jednej strony a odległością opartą na q-gramie z drugiej, jest w pewnym stopniu zależy od długości ciągu znaków. 
+ W przeciwieństwie do metryk opartych na edycji lub heurystycznych, metryki oparte na q-gramach można łatwo obliczyć między bardzo długimi ciągami tekstowymi, ponieważ liczba q-gramów napotykanych w języku w języku naturalnym (np. q ≥ 3) jest zwykle znacznie mniejsza niż q-gramy dozwolone przez alfabet. 

## Podsumowanie

+ Wybór odległości opartej na edycji zależy głównie od wymaganej dokładności. Na przykład, w słowniku gdzie różnice między dopasowanymi i słownikowymi elementami są niewielkie, odległość edycji, która pozwala na więcej typów operacji edycji (takich jak optymalne wyrównanie ciągów lub odległość Damerau-Levenshtein) może dać lepsze wyniki. 
+ Heurystyczne odległości Jaro i Jaro-Winklera zostały zaprojektowane dla
zostały zaprojektowane z myślą o stosunkowo krótkich ciągach znaków wpisywanych przez człowieka, więc ich obszar zastosowania jest jasny.

## Ćwiczenie

+ Zapisano w pliku `cwiczenie01.Rmd`.

# Blokowanie rekordów

## Idea blokowania rekordów

+ mając 3 rekordy (a, b, c) w bazie danych liczba możliwych porównań to 3 (ab, ac, bc)
+ mając 10 rekordów mamy: 45
+ mając 50000 rekordów mamy: `r choose(50000,2)`
+ liczba kombinacji: n*(n-1)/2
+ nie da się tego zrobić dla dużych zbiorów danych

## Z czego się korzysta?

+ blokowanie wg zmiennych, które są dobrej jakości (np. rok urodzenia, płeć),
+ blokowanie po pierwszych literach imion i nazwisk,
+ może się jednak zdarzyć tak, że daty urodzeń czy imiona są błędnie zapisane,
+ wtedy warto skorzystać z wyszukiwania z wykorzystaniem (przybliżonych) najbliższych sąsiadów i grafów.

## Przykład

```{r przyklad, echo=T}
dane <- qgrams(.list = list("maciejj", "majej", "ana", "annna"), q=2)
dane_rej <- qgrams(.list = list("maciej", "anna"), q=2)
vars <- intersect(colnames(dane), colnames(dane_rej))
wysz <- nn2(data = dane[,vars], dane_rej[, vars], , k= 1)
do_grafu <- data.frame(query = 1:4, neg = rep(wysz$nn.idx[,1], each=2))
g1 <- graph_from_data_frame(do_grafu)
plot(g1)
```


# Pakiet `reclin2`

Przejdzmy do pakietu `reclin2`

